import telebot
from transformers import AutoTokenizer
from configg import API_TOKEN, max_tokens_in_task
from gptt import *
from databasee import *

bot = telebot.TeleBot(API_TOKEN)


COMMAND_TO_SUBJECT = {
                        "/math": "математика",
                        "/physic": "физика",
                        "artwork": "рисование",
                     }


COMMAND_TO_LEVEL = {
                        "/beginner": "начинающий",
                        "/advanced": "продвинутый",
                     }


create_db()
create_table()

def count_tokens(text):  # Подсчет токенов в сообщении пользоватея
    tokenizer = AutoTokenizer.from_pretrained("mistralai/Mistral-7B-Instruct-v0.1")
    return len(tokenizer.encode(text))


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "Привет! Я бот-помощникь для решения задач по разным предметам "
                                      "Выбери, используя команды, предмет, по которому тебе требуется помощь "
                                      "Математика - /math "
                                      "Физика - /physic "
                                      "удалить все данные - /delete ")
    bot.send_message(message.chat.id, "Твой вопрос:")
    # bot.register_next_step_handler(message, choose_subject)


@bot.message_handler(commands=["delete"])
def deleting(message):
    user_id = int(message.from_user.id)
    delete_data(user_id)


@bot.message_handler(commands=["deleteall"])
def deleting(message):
    delete_data_all()


@bot.message_handler(commands=["math", "physic"])
def choose_subject(message):

    subject_from_user = message.text  # Берём текст команды, введённой пользователем. Например, help_with_maths
    subject = COMMAND_TO_SUBJECT.get(subject_from_user)  # Если использовать get, ошибки не будет
    user_id = int(message.from_user.id)

    rows = select_data(user_id)
    bot.send_message(message.chat.id, f"данные {rows} ")
    if rows is not None:
        bot.send_message(message.chat.id, f"данные {rows} есть ")
        column = 'subject'
        value = subject
        update_data(user_id, column, value)
        bot.send_message(message.chat.id, "данные переписаны")
    else:
        bot.send_message(message.chat.id, f"данных {rows} нет ")
        column = 'subject'
        value = subject
        insert_data(user_id, column, value)
        bot.send_message(message.chat.id, "данные внесены")
    bot.send_message(message.chat.id, "теперь выбери уровень сложности ответов: "
                                      "профи - /advanced "
                                      "новичок - /beginner ")



@bot.message_handler(commands=["beginner", "advanced"])
def choose_level(message):
    level_from_user = message.text  # Берём текст команды, введённой пользователем. Например, help_with_maths
    level = COMMAND_TO_LEVEL.get(level_from_user)  # Если использовать get, ошибки не будет
    user_id = int(message.from_user.id)

    rows = select_data(user_id)
    bot.send_message(message.chat.id, f"данные {rows} ")
    if rows is not None:
        bot.send_message(message.chat.id, f"данные {rows} есть ")
        column = 'level'
        value = level
        update_data(user_id, column, value)
        bot.send_message(message.chat.id, "данные переписаны")
    else:
        bot.send_message(message.chat.id, f"данных {rows} нет ")
        column = 'level'
        value = level
        insert_data(user_id, column, value)
        bot.send_message(message.chat.id, "данные внесены")
    bot.send_message(message.chat.id, "теперь можешь писать свой вопрос к нейросети")



@bot.message_handler(commands=['help'])
def helper(message):
    user_id = 7
    column = 'subject'
    value = 'uuue'
    update_data(user_id, column, value)
    bot.send_message(message.chat.id, "Я могу работать в нескольких режимах:")


@bot.message_handler(commands=['debug'])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)



@bot.message_handler(content_types=['text'])
def task(message):

    user_id = int(message.from_user.id)



    rows = select_data(user_id)
    bot.send_message(message.chat.id, f" {rows} an")
    try:
        subject = rows[0][2]
    except:
        bot.send_message(message.chat.id, "Пожалуйста, выбери предмет, нажав на кнопку")
        return
    level = rows[0][3]
    bot.send_message(message.chat.id, f" {subject} and {level}")

    if not subject:  # Если предмет не был указан, просим вернуться к предыдущему шагу
        bot.send_message(message.chat.id, "Пожалуйста, выбери предмет, нажав на кнопку")
        return
    if not level:  # Если уровень не был указан, просим вернуться к предыдущему шагу
        bot.send_message(message.chat.id, "Пожалуйста, выбери уровень сложности")
        return

    user_task = message.text  # Извлекаем текст задачи
    bot.send_message(message.chat.id, f"данные {rows} ")
    if rows is not None:
        bot.send_message(message.chat.id, f"данные {rows} есть ")
        column = 'task'
        value = user_task
        update_data(user_id, column, value)
        bot.send_message(message.chat.id, "данные переписаны")
    else:
        bot.send_message(message.chat.id, f"данных {rows} нет ")
        column = 'task'
        value = user_task
        insert_data(user_id, column, value)
        bot.send_message(message.chat.id, "данные внесены")

    rows = select_data(user_id)
    user_content = rows[0][4]

    global answer
    if count_tokens(user_content) > max_tokens_in_task:
        bot.send_message(message.chat.id, f"твой вопрос cлишком длинный: {count_tokens(user_content)} "
                                          f"токенов (доступно 500)")
    else:
        if (user_content.lower() != "продолжить ответ") or ('answer' not in globals()):
            answer = ""
        bot.send_message(message.chat.id, f"Генерация ответа... answer = {answer}")
        try:
            resp = gpt_generate(user_content, answer)
        except requests.RequestException:
            bot.reply_to(
                message,"Произошла ошибка! Попробуйте ещё раз.")
            return

        if resp.status_code == 200 and 'choices' in resp.json():
            result = resp.json()['choices'][0]['message']['content']
            if result == "":
                bot.send_message(message.chat.id, "Объяснение закончено")
            else:
                answer += result
                keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.row('Продолжить ответ', 'Переключить режим не раб')
                bot.send_message(message.chat.id, result,
                     reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, "Не удалось получить ответ от нейросети")
            bot.send_message(message.chat.id, 'Текст ошибки:', resp.json())


bot.polling()











import requests
from configg import LOCAL_SERVER_URL, max_tokens_in_answer


system_content = "Ты - дружелюбный помощник для решения задач. Давай подробный ответ с решением на русском языке"
assistant_content = "Решим задачу по шагам: "

def gpt_generate(user_content, answer):
    resp = requests.post(
        LOCAL_SERVER_URL,
        headers={"Content-Type": "application/json"},

        json={
            "messages": [
                {"role": "system", "content": system_content},
                {"role": "user", "content": user_content},
                {"role": "assistant", "content": assistant_content + answer},
            ],
            "temperature": 1,
            "max_tokens": max_tokens_in_answer
        }
    )
    return resp














import sqlite3


def create_db():
    connection = sqlite3.connect('sqlit.db')
    cur = connection.cursor()

def create_table():
    connection = sqlite3.connect('sqlit.db')  # устанавливаем соединение с БД
    cur = connection.cursor()
    sql_query = f'CREATE TABLE IF NOT EXISTS userss' \
                f'(id INTEGER PRIMARY KEY, ' \
                f'user_id INTEGER, ' \
                f'subject TEXT, ' \
                f'level TEXT, ' \
                f'task TEXT, ' \
                f'answer TEXT)'
    cur.execute(sql_query)



# def search_id(user_id):


def insert_data(user_id, column, value):
    connection = sqlite3.connect('sqlit.db')  # устанавливаем соединение с БД
    cur = connection.cursor()
    sql_query = f'''
        INSERT INTO userss(user_id, {column})
        VALUES(?, ?)
        '''
    cur.execute(sql_query, (user_id, value))
    connection.commit()
    connection.close()



def update_data(user_id, column, value):
    connection = sqlite3.connect('sqlit.db')  # устанавливаем соединение с БД
    cur = connection.cursor()  # создаём объект для работы с БД

    # формируем запрос UPDATE, в который подставляем название поля через f-строку
    # и значения через параметр ?
    sql_query = f"UPDATE userss SET {column} = ? WHERE user_id = ?;"
    cur.execute(sql_query, (value, user_id,))  # применяем запрос и подставляем значения
    connection.commit()  # сохраняем изменения в базе данных
    connection.close()  # закрываем соединение с БД



def select_data(user_id):
    connection = sqlite3.connect('sqlit.db')  # устанавливаем соединение с БД
    cur = connection.cursor()  # создаём объект для работы с БД
    sql_query = "SELECT * FROM userss WHERE user_id = ?;"
    cur.execute(sql_query, (user_id,))
    rows = cur.fetchall()  # Получаем результаты запроса
    connection.close()  # Закрываем соединение
    if not rows:
        rows = None
    return rows


def delete_data(user_id):
    connection = sqlite3.connect('sqlit.db')  # устанавливаем соединение с БД
    cur = connection.cursor()  # создаём объект для работы с БД
    sql_query = 'DELETE FROM userss WHERE user_id = ?;'
    cur.execute(sql_query, (user_id,))  # выполняем запрос с параметром
    connection.commit()  # сохраняем изменения в базе данных
    connection.close()  # закрываем соединение с БД

def delete_data_all():
    connection = sqlite3.connect('sqlit.db')  # устанавливаем соединение с БД
    cur = connection.cursor()  # создаём объект для работы с БД
    sql_query = 'DELETE FROM userss ;'
    cur.execute(sql_query, ())  # выполняем запрос с параметром
    connection.commit()  # сохраняем изменения в базе данных
    connection.close()  # закрываем соединение с БД
























API_TOKEN = '7005080567:AAFPFBIC2iMPcMC0oQrnGZZMhEK0HD-nF_0'
LOCAL_SERVER_URL = 'http://localhost:1234/v1/chat/completions'

max_tokens_in_task = 500
max_tokens_in_answer = 50